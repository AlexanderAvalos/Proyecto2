/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[2,5,18,21,81,82,83,84],$V8=[1,20],$V9=[1,22],$Va=[1,21],$Vb=[2,98],$Vc=[1,26],$Vd=[2,5,18,21,27,42,46,47,48,54,60,63,64,65,66,67,81,82,83,84],$Ve=[15,16],$Vf=[2,14],$Vg=[1,32],$Vh=[1,39],$Vi=[1,38],$Vj=[1,37],$Vk=[1,44],$Vl=[1,34],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,45],$Vq=[1,46],$Vr=[1,50],$Vs=[1,55],$Vt=[1,58],$Vu=[1,59],$Vv=[15,16,24,41,68,69],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[15,16,24,41,51,52,68,69,73,74,75,76,77,78,79,80],$VB=[2,101],$VC=[2,104],$VD=[1,79],$VE=[16,24],$VF=[1,114],$VG=[1,116],$VH=[1,118],$VI=[1,119],$VJ=[1,121],$VK=[1,120],$VL=[1,126],$VM=[1,122],$VN=[1,123],$VO=[1,125],$VP=[1,124],$VQ=[15,16,24,41,51,52,68,69,73,74,75,76,77,78],$VR=[1,130],$VS=[2,18,27,42,46,47,48,54,60,63,64,65,66,67,81,82,83,84],$VT=[1,138],$VU=[1,139],$VV=[15,24],$VW=[1,201],$VX=[1,202],$VY=[27,63,64],$VZ=[1,232],$V_=[2,18,27,42,43,46,47,48,54,60,63,64,65,66,67,81,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"main1":9,"metodo":10,"funcion":11,"panic":12,"tipo":13,"declaraciones":14,"PYCOMA":15,"COMA":16,"decla":17,"ID":18,"IGUAL":19,"operacion":20,"VOID":21,"MAIN":22,"PARIZQ":23,"PARDER":24,"LLAVEIZQ":25,"sentencias":26,"LLAVEDER":27,"parametros":28,"parametro":29,"sentencia":30,"callMetodo":31,"if":32,"while":33,"for":34,"do_while":35,"switch":36,"break":37,"return":38,"continue":39,"print":40,"DOSPUNTOS":41,"IF":42,"ELSE":43,"else_if":44,"elif":45,"WHILE":46,"DO":47,"FOR":48,"inicializacion":49,"incremento":50,"MAS":51,"MENOS":52,"valores":53,"CONSOLE":54,"PUNTO":55,"WRITE":56,"CADENA":57,"valor":58,"CADENAHTML":59,"SWITCH":60,"casos":61,"caso":62,"CASE":63,"DEFAULT":64,"BREAK":65,"CONTINUE":66,"RETURN":67,"AND":68,"OR":69,"NOT":70,"operacion_relacional":71,"operacion_numerica":72,"IGUALIGUAL":73,"DIFERENTE":74,"MAYOR":75,"MENOR":76,"MAYORIGUAL":77,"MENORIGUAL":78,"MULTIPLICACION":79,"DIVISION":80,"INT":81,"DOUBLE":82,"CHAR":83,"STRING":84,"ENTERO":85,"DECIMAL":86,"CARACTER":87,"FALSE":88,"TRUE":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PYCOMA",16:"COMA",18:"ID",19:"IGUAL",21:"VOID",22:"MAIN",23:"PARIZQ",24:"PARDER",25:"LLAVEIZQ",27:"LLAVEDER",41:"DOSPUNTOS",42:"IF",43:"ELSE",46:"WHILE",47:"DO",48:"FOR",51:"MAS",52:"MENOS",54:"CONSOLE",55:"PUNTO",56:"WRITE",57:"CADENA",59:"CADENAHTML",60:"SWITCH",63:"CASE",64:"DEFAULT",65:"BREAK",66:"CONTINUE",67:"RETURN",68:"AND",69:"OR",70:"NOT",73:"IGUALIGUAL",74:"DIFERENTE",75:"MAYOR",76:"MENOR",77:"MAYORIGUAL",78:"MENORIGUAL",79:"MULTIPLICACION",80:"DIVISION",81:"INT",82:"DOUBLE",83:"CHAR",84:"STRING",85:"ENTERO",86:"DECIMAL",87:"CARACTER",88:"FALSE",89:"TRUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,3],[14,3],[14,1],[17,3],[17,1],[9,7],[10,7],[10,8],[28,3],[28,1],[29,2],[11,7],[11,8],[26,2],[26,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,2],[12,1],[12,1],[12,1],[8,4],[32,7],[32,11],[32,8],[32,12],[44,2],[44,1],[45,8],[33,7],[35,9],[34,11],[49,4],[49,3],[50,3],[50,3],[31,4],[31,5],[31,2],[40,9],[40,9],[40,7],[40,7],[40,7],[53,3],[53,1],[36,7],[61,2],[61,1],[62,4],[62,3],[37,2],[39,2],[38,3],[38,2],[20,3],[20,3],[20,2],[20,1],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,1],[72,3],[72,3],[72,3],[72,3],[72,2],[72,3],[72,3],[72,4],[72,1],[13,1],[13,1],[13,1],[13,1],[13,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
this.$=  $$[$0];
break;
case 9: case 37:
 this.$= OBJETO_INSTRUCCION.s_error(yytext,this._$.first_line,this._$.first_column); 
break;
case 10:
this.$ = OBJETO_INSTRUCCION.Declaracion($$[$0-2],$$[$0-1]);
break;
case 11:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 12: case 24: case 47: case 65: case 68:
this.$ = [$$[$0]];
break;
case 13:
this.$ = $$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 14:
this.$ = $$[$0]+" = 0";
break;
case 15:
this.$ = OBJETO_INSTRUCCION.i_Main($$[$0-1]);
break;
case 16:
this.$ = OBJETO_INSTRUCCION.i_Metodo($$[$0-5],"",$$[$0-1]);
break;
case 17:
this.$ = OBJETO_INSTRUCCION.i_Metodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 18: case 64:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 19:
this.$ = [$$[$0]]; 
break;
case 20:
this.$=  $$[$0]
break;
case 21:
this.$ = OBJETO_INSTRUCCION.i_Funcion($$[$0-5],"",$$[$0-1]);
break;
case 22:
this.$ = OBJETO_INSTRUCCION.i_Funcion($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 23: case 46: case 67:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 38: case 39: case 40: case 53: case 78: case 85: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 105: case 106:
this.$ = $$[$0];
break;
case 41:
this.$ = OBJETO_INSTRUCCION.Asignacion($$[$0-3]+$$[$0-2],$$[$0-1]);
break;
case 42:
this.$ = OBJETO_INSTRUCCION.s_If($$[$0-4],$$[$0-1]);
break;
case 43:
this.$ = OBJETO_INSTRUCCION.s_Else($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 44:
this.$ = OBJETO_INSTRUCCION.s_Ifaux($$[$0-5],$$[$0-2],"",$$[$0]);
break;
case 45:
this.$ = OBJETO_INSTRUCCION.s_Ifaux($$[$0-9],$$[$0-6],$$[$0-1],$$[$0-4]);
break;
case 48:
this.$= OBJETO_INSTRUCCION.s_Elif($$[$0-4],$$[$0-1]);
break;
case 49:
this.$ = OBJETO_INSTRUCCION.s_while($$[$0-4],$$[$0-1]);
break;
case 50:
this.$ = OBJETO_INSTRUCCION.s_Do($$[$0-6],$$[$0-2]);
break;
case 51:
this.$=OBJETO_INSTRUCCION.s_For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 52:
this.$= $$[$0];
break;
case 54:
this.$ =  $$[$0-2];
break;
case 55:
this.$ = $$[$0-2];
break;
case 56:
this.$=OBJETO_INSTRUCCION.s_CallMetodo($$[$0-3],"");
break;
case 57:
this.$=OBJETO_INSTRUCCION.s_CallMetodo($$[$0-4],$$[$0-2]);
break;
case 58:
this.$ = OBJETO_INSTRUCCION.s_incremento( $$[$0-1] + "+= 1");
break;
case 59:
this.$ = OBJETO_INSTRUCCION.s_Print('\"'+$$[$0-4]+'\"'+$$[$0-3]+$$[$0-2]);
break;
case 60:
this.$ = OBJETO_INSTRUCCION.s_Print('\"'+$$[$0-4]+'\"'+","+$$[$0-2]);
break;
case 61: case 62:
this.$ = OBJETO_INSTRUCCION.s_Print($$[$0-2]);
break;
case 63:
this.$ = OBJETO_INSTRUCCION.s_PrintH($$[$0-2]);
break;
case 66:
this.$= OBJETO_INSTRUCCION.s_Switch($$[$0-4],$$[$0-1]);
break;
case 69:
this.$ = OBJETO_INSTRUCCION.s_Casos($$[$0-2],$$[$0]);
break;
case 70:
this.$ = OBJETO_INSTRUCCION.s_Default($$[$0]);
break;
case 71:
this.$ = OBJETO_INSTRUCCION.s_Break();
break;
case 72:
this.$ = OBJETO_INSTRUCCION.s_Continue();
break;
case 73:
this.$ = OBJETO_INSTRUCCION.s_Return($$[$0-1]);
break;
case 74:
this.$ = OBJETO_INSTRUCCION.s_Return("");
break;
case 75:
this.$ = $$[$0-2] + "and" + $$[$0];
break;
case 76:
this.$ = $$[$0-2] + "or" + $$[$0];
break;
case 77:
this.$ =  "not" + $$[$0];
break;
case 79:
this.$ = $$[$0-2] + "==" + $$[$0];
break;
case 80:
this.$ = $$[$0-2] + "!=" + $$[$0];
break;
case 81:
this.$ = $$[$0-2] + ">" + $$[$0];
break;
case 82:
this.$ = $$[$0-2] + "<" + $$[$0];
break;
case 83:
this.$ = $$[$0-2] + ">=" + $$[$0];
break;
case 84:
this.$ = $$[$0-2] + "<=" + $$[$0];
break;
case 86:
this.$ = $$[$0-2] + "+" + $$[$0];
break;
case 87:
this.$ = $$[$0-2] + "-" + $$[$0];
break;
case 88:
this.$ = $$[$0-2] + "*" + $$[$0];
break;
case 89:
this.$ = $$[$0-2] + "/" + $$[$0];
break;
case 90:
this.$ = "-" +$$[$0];
break;
case 91:
this.$ = "("+$$[$0-1]+")";
break;
case 92:
this.$ = $$[$0-2]+"()" ;
break;
case 93:
this.$ = $$[$0-3]+"("+$$[$0-1]+")";
break;
case 104:
this.$ = '\"'+$$[$0]+'\"';
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,21:$V2,81:$V3,82:$V4,83:$V5,84:$V6},{1:[3]},{2:$V0,5:[1,17],6:18,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,21:$V2,81:$V3,82:$V4,83:$V5,84:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),{12:19,15:$V8,27:$V9,41:$Va},{14:23,17:25,18:[1,24]},{18:$Vb,19:$Vc},{18:[1,28],22:[1,27]},{18:[2,95]},{18:[2,96]},{18:[2,97]},{18:[2,99]},{1:[2,1]},o($V7,[2,2]),o($V7,[2,9]),o($Vd,[2,38]),o($Vd,[2,39]),o($Vd,[2,40]),{15:[1,29],16:[1,30]},o($Ve,$Vf,{19:$Vg,23:[1,31]}),o($Ve,[2,12]),{18:$Vh,20:33,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{23:[1,47]},{23:[1,48]},o($Vd,[2,10]),{17:49,18:$Vr},{13:54,18:$Vs,24:[1,51],28:52,29:53,81:$V3,82:$V4,83:$V5,84:$V6},{18:$Vh,20:56,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{15:[1,57],68:$Vt,69:$Vu},{18:$Vh,20:60,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($Vv,[2,78]),o($Vv,[2,85],{51:$Vw,52:$Vx,73:[1,61],74:[1,62],75:[1,63],76:[1,64],77:[1,65],78:[1,66],79:$Vy,80:$Vz}),{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:71,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,20:72,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($VA,$VB,{23:[1,73]}),o($VA,[2,94]),o($VA,[2,100]),o($VA,[2,102]),o($VA,[2,103]),o($VA,$VC),o($VA,[2,105]),o($VA,[2,106]),{24:[1,74]},{13:54,18:$Vs,24:[1,75],28:76,29:53,81:$V3,82:$V4,83:$V5,84:$V6},o($Ve,[2,11]),o($Ve,$Vf,{19:$Vg}),{25:[1,77]},{16:$VD,24:[1,78]},o($VE,[2,19]),{18:[1,80]},{18:$Vb},o($Ve,[2,13],{68:$Vt,69:$Vu}),o($Vd,[2,41]),{18:$Vh,20:81,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,20:82,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($Vv,[2,77]),{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:83,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:84,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:85,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:86,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:87,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:88,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:89,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:90,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:91,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,23:$Vi,52:$Vj,57:$Vk,58:40,72:92,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($VA,[2,90]),{24:[1,93],68:$Vt,69:$Vu},{18:$Vh,20:96,23:$Vi,24:[1,94],52:$Vj,53:95,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{25:[1,97]},{25:[1,98]},{16:$VD,24:[1,99]},{2:$VF,7:102,8:104,13:115,18:$VG,26:100,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{25:[1,127]},{13:54,18:$Vs,29:128,81:$V3,82:$V4,83:$V5,84:$V6},o($VE,[2,20]),o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,79],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,80],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,81],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,82],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,83],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($Vv,[2,84],{51:$Vw,52:$Vx,79:$Vy,80:$Vz}),o($VQ,[2,86],{79:$Vy,80:$Vz}),o($VQ,[2,87],{79:$Vy,80:$Vz}),o($VA,[2,88]),o($VA,[2,89]),o($VA,[2,91]),o($VA,[2,92]),{16:$VR,24:[1,129]},o($VE,[2,65],{68:$Vt,69:$Vu}),{2:$VF,7:102,8:104,13:115,18:$VG,26:131,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,26:132,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{25:[1,133]},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,134],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VS,[2,24]),o($VS,[2,25]),o($VS,[2,26]),o($VS,[2,27]),o($VS,[2,28]),o($VS,[2,29]),o($VS,[2,30]),o($VS,[2,31]),o($VS,[2,32]),o($VS,[2,33]),o($VS,[2,34]),o($VS,[2,35]),o($VS,[2,36]),{12:136,15:$V8,27:$V9,41:$Va},{14:23,17:25,18:$Vr},{18:$Vb,19:$Vc,23:[1,137],51:$VT,52:$VU},{15:[1,140]},{23:[1,141]},{23:[1,142]},{23:[1,143]},{25:[1,144]},{23:[1,145]},{15:[1,146]},{15:[1,148],18:$Vh,20:147,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{15:[1,149]},{55:[1,150]},{2:$VF,7:102,8:104,13:115,18:$VG,26:151,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VE,[2,18]),o($VA,[2,93]),{18:$Vh,20:152,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,153],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,154],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,26:155,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($V7,[2,21]),o($VS,[2,23]),o($VS,[2,37]),{18:$Vh,20:96,23:$Vi,24:[1,156],52:$Vj,53:157,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{51:[1,158]},{52:[1,159]},o($VS,[2,58]),{18:$Vh,20:160,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,20:161,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{13:163,18:[1,164],49:162,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,26:165,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{18:$Vh,20:166,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($VS,[2,71]),{15:[1,167],68:$Vt,69:$Vu},o($VS,[2,74]),o($VS,[2,72]),{56:[1,168]},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,169],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VE,[2,64],{68:$Vt,69:$Vu}),o($V7,[2,15]),o($V7,[2,16]),{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,170],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{15:[1,171]},{16:$VR,24:[1,172]},o($VV,[2,54]),o($VV,[2,55]),{24:[1,173],68:$Vt,69:$Vu},{24:[1,174],68:$Vt,69:$Vu},{15:[1,175]},{18:[1,176]},{18:$Vb,19:[1,177]},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,178],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{24:[1,179],68:$Vt,69:$Vu},o($VS,[2,73]),{23:[1,180]},o($V7,[2,22]),o($V7,[2,17]),o($VS,[2,56]),{15:[1,181]},{25:[1,182]},{25:[1,183]},{18:$Vh,20:184,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{19:[1,185]},{18:$Vh,20:186,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{46:[1,187]},{25:[1,188]},{18:[1,193],50:191,57:[1,189],58:190,59:[1,192],85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},o($VS,[2,57]),{2:$VF,7:102,8:104,13:115,18:$VG,26:194,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,26:195,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{15:[1,196],68:$Vt,69:$Vu},{18:$Vh,20:197,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{15:[2,53],68:$Vt,69:$Vu},{23:[1,198]},{61:199,62:200,63:$VW,64:$VX},{16:[1,203],24:$VC,51:[1,204]},{24:[1,205]},{24:[1,206]},{24:[1,207]},{24:$VB,51:$VT,52:$VU},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,208],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,209],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{18:[1,211],50:210},{15:[2,52],68:$Vt,69:$Vu},{18:$Vh,20:212,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{27:[1,213],62:214,63:$VW,64:$VX},o($VY,[2,68]),{18:$Vh,20:215,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{41:[1,216]},{18:$Vh,20:96,23:$Vi,52:$Vj,53:217,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{18:$Vh,20:96,23:$Vi,52:$Vj,53:218,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{15:[1,219]},{15:[1,220]},{15:[1,221]},o($VS,[2,42],{44:223,45:224,43:[1,222]}),o($VS,[2,49]),{24:[1,225]},{51:$VT,52:$VU},{24:[1,226],68:$Vt,69:$Vu},o($VS,[2,66]),o($VY,[2,67]),{41:[1,227],68:$Vt,69:$Vu},{2:$VF,7:102,8:104,13:115,18:$VG,26:228,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{16:$VR,24:[1,229]},{16:$VR,24:[1,230]},o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),{25:[1,231],42:$VZ},o($VS,[2,44],{45:234,43:[1,233]}),o($V_,[2,47]),{25:[1,235]},{15:[1,236]},{2:$VF,7:102,8:104,13:115,18:$VG,26:237,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VY,[2,70],{7:102,31:103,8:104,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,13:115,50:117,30:135,2:$VF,18:$VG,42:$VH,46:$VI,47:$VJ,48:$VK,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6}),{15:[1,238]},{15:[1,239]},{2:$VF,7:102,8:104,13:115,18:$VG,26:240,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{23:[1,241]},{25:[1,242],42:$VZ},o($V_,[2,46]),{2:$VF,7:102,8:104,13:115,18:$VG,26:243,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VS,[2,50]),o($VY,[2,69],{7:102,31:103,8:104,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,13:115,50:117,30:135,2:$VF,18:$VG,42:$VH,46:$VI,47:$VJ,48:$VK,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6}),o($VS,[2,59]),o($VS,[2,60]),{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,244],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{18:$Vh,20:245,23:$Vi,52:$Vj,57:$Vk,58:40,70:$Vl,71:35,72:36,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq},{2:$VF,7:102,8:104,13:115,18:$VG,26:246,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,247],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VS,[2,43]),{24:[1,248],68:$Vt,69:$Vu},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,249],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($VS,[2,51]),{25:[1,250]},o($VS,[2,45]),{2:$VF,7:102,8:104,13:115,18:$VG,26:251,30:101,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},{2:$VF,7:102,8:104,13:115,18:$VG,27:[1,252],30:135,31:103,32:105,33:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,42:$VH,46:$VI,47:$VJ,48:$VK,50:117,54:$VL,60:$VM,65:$VN,66:$VO,67:$VP,81:$V3,82:$V4,83:$V5,84:$V6},o($V_,[2,48])],
defaultActions: {13:[2,95],14:[2,96],15:[2,97],16:[2,99],17:[2,1],55:[2,98]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const TIPO_INSTRUCCION	    = require('./instrucciones').TIPO_INSTRUCCION;
	const OBJETO_INSTRUCCION    = require('./instrucciones').OBJETO_INSTRUCCION;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 81;
break;
case 4:return 82;
break;
case 5:return 83;
break;
case 6:return 84;
break;
case 7:return 'BOOL';
break;
case 8:return 21;
break;
case 9:return 22;
break;
case 10:return 42;
break;
case 11:return 43;
break;
case 12:return 48;
break;
case 13:return 46;
break;
case 14:return 47;
break;
case 15:return 60;
break;
case 16:return 63;
break;
case 17:return 65;
break;
case 18:return 64;
break;
case 19:return 67;
break;
case 20:return 66;
break;
case 21:return 54;
break;
case 22:return 56;
break;
case 23:return 89;
break;
case 24:return 88;
break;
case 25:return 68;
break;
case 26:return 69;
break;
case 27:return 74;
break;
case 28:return 73;
break;
case 29:return 77;
break;
case 30:return 78;
break;
case 31:return 70;
break;
case 32:return 41;
break;
case 33:return 15;
break;
case 34:return 16;
break;
case 35:return 'CSIMPLE';
break;
case 36:return 19;
break;
case 37:return 27;
break;
case 38:return 25;
break;
case 39:return 23;
break;
case 40:return 24;
break;
case 41:return 75;
break;
case 42:return 76;
break;
case 43:return 55;
break;
case 44:return 51;
break;
case 45:return 52;
break;
case 46:return 80;
break;
case 47:return 79;
break;
case 48:return 87;
break;
case 49:return 59;
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 51:return 86;
break;
case 52:return 85
break;
case 53:return 18;
break;
case 54:return 5;
break;
case 55: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\')/i,/^(?:=)/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\()/i,/^(?:\))/i,/^(?:>)/i,/^(?:<)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:'[^\']')/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}