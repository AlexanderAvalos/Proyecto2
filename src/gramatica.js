/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[5,17,20,80,81,82,83],$V7=[2,93],$V8=[1,21],$V9=[14,15],$Va=[2,13],$Vb=[1,27],$Vc=[1,34],$Vd=[1,33],$Ve=[1,32],$Vf=[1,39],$Vg=[1,29],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,40],$Vl=[1,41],$Vm=[5,17,20,26,40,44,45,46,52,58,61,63,64,65,66,80,81,82,83],$Vn=[1,45],$Vo=[1,50],$Vp=[1,53],$Vq=[1,54],$Vr=[14,15,23,62,67,68],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[14,15,23,49,50,62,67,68,72,73,74,75,76,77,78,79],$Vx=[2,96],$Vy=[2,99],$Vz=[1,74],$VA=[15,23],$VB=[1,110],$VC=[1,112],$VD=[1,113],$VE=[1,115],$VF=[1,114],$VG=[1,120],$VH=[1,116],$VI=[1,117],$VJ=[1,119],$VK=[1,118],$VL=[14,15,23,49,50,62,67,68,72,73,74,75,76,77],$VM=[1,124],$VN=[17,26,40,44,45,46,52,58,61,63,64,65,66,80,81,82,83],$VO=[1,131],$VP=[1,132],$VQ=[14,23],$VR=[1,194],$VS=[1,195],$VT=[26,61,63],$VU=[1,225],$VV=[17,26,40,41,44,45,46,52,58,61,63,64,65,66,80,81,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"main1":9,"metodo":10,"funcion":11,"tipo":12,"declaraciones":13,"PYCOMA":14,"COMA":15,"decla":16,"ID":17,"IGUAL":18,"operacion":19,"VOID":20,"MAIN":21,"PARIZQ":22,"PARDER":23,"LLAVEIZQ":24,"sentencias":25,"LLAVEDER":26,"parametros":27,"parametro":28,"sentencia":29,"callMetodo":30,"if":31,"while":32,"for":33,"do_while":34,"switch":35,"break":36,"return":37,"continue":38,"print":39,"IF":40,"ELSE":41,"else_if":42,"elif":43,"WHILE":44,"DO":45,"FOR":46,"inicializacion":47,"incremento":48,"MAS":49,"MENOS":50,"valores":51,"CONSOLE":52,"PUNTO":53,"WRITE":54,"CADENA":55,"valor":56,"CADENAHTML":57,"SWITCH":58,"casos":59,"caso":60,"CASE":61,"DOSPUNTOS":62,"DEFAULT":63,"BREAK":64,"CONTINUE":65,"RETURN":66,"AND":67,"OR":68,"NOT":69,"operacion_relacional":70,"operacion_numerica":71,"IGUALIGUAL":72,"DIFERENTE":73,"MAYOR":74,"MENOR":75,"MAYORIGUAL":76,"MENORIGUAL":77,"MULTIPLICACION":78,"DIVISION":79,"INT":80,"DOUBLE":81,"CHAR":82,"STRING":83,"ENTERO":84,"DECIMAL":85,"CARACTER":86,"FALSE":87,"TRUE":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"PYCOMA",15:"COMA",17:"ID",18:"IGUAL",20:"VOID",21:"MAIN",22:"PARIZQ",23:"PARDER",24:"LLAVEIZQ",26:"LLAVEDER",40:"IF",41:"ELSE",44:"WHILE",45:"DO",46:"FOR",49:"MAS",50:"MENOS",52:"CONSOLE",53:"PUNTO",54:"WRITE",55:"CADENA",57:"CADENAHTML",58:"SWITCH",61:"CASE",62:"DOSPUNTOS",63:"DEFAULT",64:"BREAK",65:"CONTINUE",66:"RETURN",67:"AND",68:"OR",69:"NOT",72:"IGUALIGUAL",73:"DIFERENTE",74:"MAYOR",75:"MENOR",76:"MAYORIGUAL",77:"MENORIGUAL",78:"MULTIPLICACION",79:"DIVISION",80:"INT",81:"DOUBLE",82:"CHAR",83:"STRING",84:"ENTERO",85:"DECIMAL",86:"CARACTER",87:"FALSE",88:"TRUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[13,3],[13,1],[16,3],[16,1],[9,7],[10,7],[10,8],[27,3],[27,1],[28,2],[11,7],[11,8],[25,2],[25,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[8,4],[31,7],[31,11],[31,8],[31,12],[42,2],[42,1],[43,8],[32,7],[34,9],[33,11],[47,4],[47,3],[48,3],[48,3],[30,4],[30,5],[30,2],[39,9],[39,9],[39,7],[39,7],[39,7],[51,3],[51,1],[35,7],[59,2],[59,1],[60,4],[60,3],[36,2],[38,2],[37,3],[37,2],[19,3],[19,3],[19,2],[19,1],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,1],[71,3],[71,3],[71,3],[71,3],[71,2],[71,3],[71,3],[71,4],[71,1],[12,1],[12,1],[12,1],[12,1],[12,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:
this.$=  $$[$0];
break;
case 9:
this.$ = OBJETO_INSTRUCCION.Declaracion($$[$0-2],$$[$0-1]);
break;
case 10:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 11: case 23: case 42: case 60: case 63:
this.$ = [$$[$0]];
break;
case 12:
this.$ = $$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 13:
this.$ = $$[$0]+" = 0";
break;
case 14:
this.$ = OBJETO_INSTRUCCION.i_Main($$[$0-1]);
break;
case 15:
this.$ = OBJETO_INSTRUCCION.i_Metodo($$[$0-5],"",$$[$0-1]);
break;
case 16:
this.$ = OBJETO_INSTRUCCION.i_Metodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 17: case 59:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 18:
this.$ = [$$[$0]]; 
break;
case 19:
this.$=  $$[$0]
break;
case 20:
this.$ = OBJETO_INSTRUCCION.i_Funcion($$[$0-5],"",$$[$0-1]);
break;
case 21:
this.$ = OBJETO_INSTRUCCION.i_Funcion($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 22: case 41: case 62:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 36:
this.$ = OBJETO_INSTRUCCION.Asignacion($$[$0-3]+$$[$0-2],$$[$0-1]);
break;
case 37:
this.$ = OBJETO_INSTRUCCION.s_If($$[$0-4],$$[$0-1]);
break;
case 38:
this.$ = OBJETO_INSTRUCCION.s_Else($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 39:
this.$ = OBJETO_INSTRUCCION.s_Ifaux($$[$0-5],$$[$0-2],"",$$[$0]);
break;
case 40:
this.$ = OBJETO_INSTRUCCION.s_Ifaux($$[$0-9],$$[$0-6],$$[$0-1],$$[$0-4]);
break;
case 43:
this.$= OBJETO_INSTRUCCION.s_Elif($$[$0-4],$$[$0-1]);
break;
case 44:
this.$ = OBJETO_INSTRUCCION.s_while($$[$0-4],$$[$0-1]);
break;
case 45:
this.$ = OBJETO_INSTRUCCION.s_Do($$[$0-6],$$[$0-2]);
break;
case 46:
this.$=OBJETO_INSTRUCCION.s_For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 47:
this.$= $$[$0];
break;
case 48: case 73: case 80: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 100: case 101:
this.$ = $$[$0];
break;
case 49:
this.$ =  $$[$0-2];
break;
case 50:
this.$ = $$[$0-2];
break;
case 51:
this.$=OBJETO_INSTRUCCION.s_CallMetodo($$[$0-3],"");
break;
case 52:
this.$=OBJETO_INSTRUCCION.s_CallMetodo($$[$0-4],$$[$0-2]);
break;
case 53:
this.$ = OBJETO_INSTRUCCION.s_incremento( $$[$0-1] + "+= 1");
break;
case 54:
this.$ = OBJETO_INSTRUCCION.s_Print('\"'+$$[$0-4]+'\"'+$$[$0-3]+$$[$0-2]);
break;
case 55:
this.$ = OBJETO_INSTRUCCION.s_Print('\"'+$$[$0-4]+'\"'+","+$$[$0-2]);
break;
case 56: case 57:
this.$ = OBJETO_INSTRUCCION.s_Print($$[$0-2]);
break;
case 58:
this.$ = OBJETO_INSTRUCCION.s_PrintH($$[$0-2]);
break;
case 61:
this.$= OBJETO_INSTRUCCION.s_Switch($$[$0-4],$$[$0-1]);
break;
case 64:
this.$ = OBJETO_INSTRUCCION.s_Casos($$[$0-2],$$[$0]);
break;
case 65:
this.$ = OBJETO_INSTRUCCION.s_Default($$[$0]);
break;
case 66:
this.$ = OBJETO_INSTRUCCION.s_Break();
break;
case 67:
this.$ = OBJETO_INSTRUCCION.s_Continue();
break;
case 68:
this.$ = OBJETO_INSTRUCCION.s_Return($$[$0-1]);
break;
case 69:
this.$ = OBJETO_INSTRUCCION.s_Return("");
break;
case 70:
this.$ = $$[$0-2] + "and" + $$[$0];
break;
case 71:
this.$ = $$[$0-2] + "or" + $$[$0];
break;
case 72:
this.$ =  "not" + $$[$0];
break;
case 74:
this.$ = $$[$0-2] + "==" + $$[$0];
break;
case 75:
this.$ = $$[$0-2] + "!=" + $$[$0];
break;
case 76:
this.$ = $$[$0-2] + ">" + $$[$0];
break;
case 77:
this.$ = $$[$0-2] + "<" + $$[$0];
break;
case 78:
this.$ = $$[$0-2] + ">=" + $$[$0];
break;
case 79:
this.$ = $$[$0-2] + "<=" + $$[$0];
break;
case 81:
this.$ = $$[$0-2] + "+" + $$[$0];
break;
case 82:
this.$ = $$[$0-2] + "-" + $$[$0];
break;
case 83:
this.$ = $$[$0-2] + "*" + $$[$0];
break;
case 84:
this.$ = $$[$0-2] + "/" + $$[$0];
break;
case 85:
this.$ = "-" +$$[$0];
break;
case 86:
this.$ = "("+$$[$0-1]+")";
break;
case 87:
this.$ = $$[$0-2]+"()" ;
break;
case 88:
this.$ = $$[$0-3]+"("+$$[$0-1]+")";
break;
case 99:
this.$ = '\"'+$$[$0]+'\"';
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,17:$V0,20:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:7,11:8,12:9,17:$V0,20:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),{13:18,16:20,17:[1,19]},{17:$V7,18:$V8},{17:[1,23],21:[1,22]},{17:[2,90]},{17:[2,91]},{17:[2,92]},{17:[2,94]},{1:[2,1]},o($V6,[2,2]),{14:[1,24],15:[1,25]},o($V9,$Va,{18:$Vb,22:[1,26]}),o($V9,[2,11]),{17:$Vc,19:28,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{22:[1,42]},{22:[1,43]},o($Vm,[2,9]),{16:44,17:$Vn},{12:49,17:$Vo,23:[1,46],27:47,28:48,80:$V2,81:$V3,82:$V4,83:$V5},{17:$Vc,19:51,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{14:[1,52],67:$Vp,68:$Vq},{17:$Vc,19:55,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vr,[2,73]),o($Vr,[2,80],{49:$Vs,50:$Vt,72:[1,56],73:[1,57],74:[1,58],75:[1,59],76:[1,60],77:[1,61],78:$Vu,79:$Vv}),{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:66,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,19:67,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vw,$Vx,{22:[1,68]}),o($Vw,[2,89]),o($Vw,[2,95]),o($Vw,[2,97]),o($Vw,[2,98]),o($Vw,$Vy),o($Vw,[2,100]),o($Vw,[2,101]),{23:[1,69]},{12:49,17:$Vo,23:[1,70],27:71,28:48,80:$V2,81:$V3,82:$V4,83:$V5},o($V9,[2,10]),o($V9,$Va,{18:$Vb}),{24:[1,72]},{15:$Vz,23:[1,73]},o($VA,[2,18]),{17:[1,75]},{17:$V7},o($V9,[2,12],{67:$Vp,68:$Vq}),o($Vm,[2,36]),{17:$Vc,19:76,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,19:77,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vr,[2,72]),{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:78,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:79,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:80,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:81,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:82,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:83,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:84,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:85,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:86,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,22:$Vd,50:$Ve,55:$Vf,56:35,71:87,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vw,[2,85]),{23:[1,88],67:$Vp,68:$Vq},{17:$Vc,19:91,22:$Vd,23:[1,89],50:$Ve,51:90,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{24:[1,92]},{24:[1,93]},{15:$Vz,23:[1,94]},{7:97,8:99,12:109,17:$VB,25:95,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{24:[1,121]},{12:49,17:$Vo,28:122,80:$V2,81:$V3,82:$V4,83:$V5},o($VA,[2,19]),o($Vr,[2,70]),o($Vr,[2,71]),o($Vr,[2,74],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($Vr,[2,75],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($Vr,[2,76],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($Vr,[2,77],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($Vr,[2,78],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($Vr,[2,79],{49:$Vs,50:$Vt,78:$Vu,79:$Vv}),o($VL,[2,81],{78:$Vu,79:$Vv}),o($VL,[2,82],{78:$Vu,79:$Vv}),o($Vw,[2,83]),o($Vw,[2,84]),o($Vw,[2,86]),o($Vw,[2,87]),{15:$VM,23:[1,123]},o($VA,[2,60],{67:$Vp,68:$Vq}),{7:97,8:99,12:109,17:$VB,25:125,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,25:126,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{24:[1,127]},{7:97,8:99,12:109,17:$VB,26:[1,128],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VN,[2,23]),o($VN,[2,24]),o($VN,[2,25]),o($VN,[2,26]),o($VN,[2,27]),o($VN,[2,28]),o($VN,[2,29]),o($VN,[2,30]),o($VN,[2,31]),o($VN,[2,32]),o($VN,[2,33]),o($VN,[2,34]),o($VN,[2,35]),{13:18,16:20,17:$Vn},{17:$V7,18:$V8,22:[1,130],49:$VO,50:$VP},{14:[1,133]},{22:[1,134]},{22:[1,135]},{22:[1,136]},{24:[1,137]},{22:[1,138]},{14:[1,139]},{14:[1,141],17:$Vc,19:140,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{14:[1,142]},{53:[1,143]},{7:97,8:99,12:109,17:$VB,25:144,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VA,[2,17]),o($Vw,[2,88]),{17:$Vc,19:145,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{7:97,8:99,12:109,17:$VB,26:[1,146],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,26:[1,147],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,25:148,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($V6,[2,20]),o($VN,[2,22]),{17:$Vc,19:91,22:$Vd,23:[1,149],50:$Ve,51:150,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{49:[1,151]},{50:[1,152]},o($VN,[2,53]),{17:$Vc,19:153,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,19:154,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{12:156,17:[1,157],47:155,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,25:158,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{17:$Vc,19:159,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($VN,[2,66]),{14:[1,160],67:$Vp,68:$Vq},o($VN,[2,69]),o($VN,[2,67]),{54:[1,161]},{7:97,8:99,12:109,17:$VB,26:[1,162],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VA,[2,59],{67:$Vp,68:$Vq}),o($V6,[2,14]),o($V6,[2,15]),{7:97,8:99,12:109,17:$VB,26:[1,163],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{14:[1,164]},{15:$VM,23:[1,165]},o($VQ,[2,49]),o($VQ,[2,50]),{23:[1,166],67:$Vp,68:$Vq},{23:[1,167],67:$Vp,68:$Vq},{14:[1,168]},{17:[1,169]},{17:$V7,18:[1,170]},{7:97,8:99,12:109,17:$VB,26:[1,171],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{23:[1,172],67:$Vp,68:$Vq},o($VN,[2,68]),{22:[1,173]},o($V6,[2,21]),o($V6,[2,16]),o($VN,[2,51]),{14:[1,174]},{24:[1,175]},{24:[1,176]},{17:$Vc,19:177,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{18:[1,178]},{17:$Vc,19:179,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{44:[1,180]},{24:[1,181]},{17:[1,186],48:184,55:[1,182],56:183,57:[1,185],84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($VN,[2,52]),{7:97,8:99,12:109,17:$VB,25:187,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,25:188,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{14:[1,189],67:$Vp,68:$Vq},{17:$Vc,19:190,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{14:[2,48],67:$Vp,68:$Vq},{22:[1,191]},{59:192,60:193,61:$VR,63:$VS},{15:[1,196],23:$Vy,49:[1,197]},{23:[1,198]},{23:[1,199]},{23:[1,200]},{23:$Vx,49:$VO,50:$VP},{7:97,8:99,12:109,17:$VB,26:[1,201],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,26:[1,202],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{17:[1,204],48:203},{14:[2,47],67:$Vp,68:$Vq},{17:$Vc,19:205,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{26:[1,206],60:207,61:$VR,63:$VS},o($VT,[2,63]),{17:$Vc,19:208,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{62:[1,209]},{17:$Vc,19:91,22:$Vd,50:$Ve,51:210,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{17:$Vc,19:91,22:$Vd,50:$Ve,51:211,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{14:[1,212]},{14:[1,213]},{14:[1,214]},o($VN,[2,37],{42:216,43:217,41:[1,215]}),o($VN,[2,44]),{23:[1,218]},{49:$VO,50:$VP},{23:[1,219],67:$Vp,68:$Vq},o($VN,[2,61]),o($VT,[2,62]),{62:[1,220],67:$Vp,68:$Vq},{7:97,8:99,12:109,17:$VB,25:221,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{15:$VM,23:[1,222]},{15:$VM,23:[1,223]},o($VN,[2,56]),o($VN,[2,57]),o($VN,[2,58]),{24:[1,224],40:$VU},o($VN,[2,39],{43:227,41:[1,226]}),o($VV,[2,42]),{24:[1,228]},{14:[1,229]},{7:97,8:99,12:109,17:$VB,25:230,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VT,[2,65],{7:97,30:98,8:99,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,12:109,48:111,29:129,17:$VB,40:$VC,44:$VD,45:$VE,46:$VF,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5}),{14:[1,231]},{14:[1,232]},{7:97,8:99,12:109,17:$VB,25:233,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{22:[1,234]},{24:[1,235],40:$VU},o($VV,[2,41]),{7:97,8:99,12:109,17:$VB,25:236,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VN,[2,45]),o($VT,[2,64],{7:97,30:98,8:99,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,12:109,48:111,29:129,17:$VB,40:$VC,44:$VD,45:$VE,46:$VF,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5}),o($VN,[2,54]),o($VN,[2,55]),{7:97,8:99,12:109,17:$VB,26:[1,237],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{17:$Vc,19:238,22:$Vd,50:$Ve,55:$Vf,56:35,69:$Vg,70:30,71:31,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{7:97,8:99,12:109,17:$VB,25:239,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,26:[1,240],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VN,[2,38]),{23:[1,241],67:$Vp,68:$Vq},{7:97,8:99,12:109,17:$VB,26:[1,242],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VN,[2,46]),{24:[1,243]},o($VN,[2,40]),{7:97,8:99,12:109,17:$VB,25:244,29:96,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},{7:97,8:99,12:109,17:$VB,26:[1,245],29:129,30:98,31:100,32:101,33:102,34:103,35:104,36:105,37:106,38:107,39:108,40:$VC,44:$VD,45:$VE,46:$VF,48:111,52:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,80:$V2,81:$V3,82:$V4,83:$V5},o($VV,[2,43])],
defaultActions: {12:[2,90],13:[2,91],14:[2,92],15:[2,94],16:[2,1],50:[2,93]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_INSTRUCCION	    = require('./instrucciones').TIPO_INSTRUCCION;
	const OBJETO_INSTRUCCION    = require('./instrucciones').OBJETO_INSTRUCCION;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 80;
break;
case 4:return 81;
break;
case 5:return 82;
break;
case 6:return 83;
break;
case 7:return 'BOOL';
break;
case 8:return 20;
break;
case 9:return 21;
break;
case 10:return 40;
break;
case 11:return 41;
break;
case 12:return 46;
break;
case 13:return 44;
break;
case 14:return 45;
break;
case 15:return 58;
break;
case 16:return 61;
break;
case 17:return 64;
break;
case 18:return 63;
break;
case 19:return 66;
break;
case 20:return 65;
break;
case 21:return 52;
break;
case 22:return 54;
break;
case 23:return 88;
break;
case 24:return 87;
break;
case 25:return 67;
break;
case 26:return 68;
break;
case 27:return 73;
break;
case 28:return 72;
break;
case 29:return 76;
break;
case 30:return 77;
break;
case 31:return 69;
break;
case 32:return 62;
break;
case 33:return 14;
break;
case 34:return 15;
break;
case 35:return 'CSIMPLE';
break;
case 36:return 18;
break;
case 37:return 26;
break;
case 38:return 24;
break;
case 39:return 22;
break;
case 40:return 23;
break;
case 41:return 74;
break;
case 42:return 75;
break;
case 43:return 53;
break;
case 44:return 49;
break;
case 45:return 50;
break;
case 46:return 79;
break;
case 47:return 78;
break;
case 48:return 86;
break;
case 49:return 57;
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 55; 
break;
case 51:return 85;
break;
case 52:return 84
break;
case 53:return 17;
break;
case 54:return 5;
break;
case 55: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\')/i,/^(?:=)/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\()/i,/^(?:\))/i,/^(?:>)/i,/^(?:<)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:'[^\']')/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}